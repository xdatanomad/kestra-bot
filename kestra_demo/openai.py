


"""
Kestra Demo OpenAI Integration Module

This module provides integration with OpenAI's API for generating Kestra Flow YAML
configurations from user prompts. It utilizes OpenAI's responses API with a
pre-configured prompt for Kestra flow generation.

Author: Parham (parham.parvizi@gmail.com)
"""

import os
import logging
import time
from typing import Optional
from openai import OpenAI
from pydantic import BaseModel, Field, field_validator

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Load OpenAI API key from environment variable: $KESTRABOT_OPENAI_API_KEY
KESTRABOT_OPENAI_API_KEY = os.getenv("KESTRABOT_OPENAI_API_KEY", None)

# Constants
KESTRA_PROMPT_ID = "pmpt_686e75a5f28c8193b1100b441bcdca320f2c2115eba99734"
KESTRA_PROMPT_VERSION = "1"


class KestraFlowResponse(BaseModel):
    """
    KestraFlowResponse represents the response from an OpenAI-powered Kestra flow execution.

    Attributes:
    This class is typically used to encapsulate and validate the response data from an OpenAI API call within a Kestra workflow, providing metadata about token usage and the model employed.
    """
    type: str               = Field("completed", description="The type of response, indicating it is a Kestra flow response used with OpenAI Streaming Responses. Valid values: 'created', 'completed', 'delta', 'error'.")
    input: str              = Field(..., description="The user input prompt sent to OpenAI for generating the Kestra flow.")
    output: str             = Field(..., description="The YAML response content generated by OpenAI.")
    metadata: Optional[str] = Field("", description="Optional metadata context provided to OpenAI, such as table schemas or data definitions.")
    input_tokens: int       = Field(..., description="The number of input tokens used in the request.")
    output_tokens: int      = Field(..., description="The number of output tokens generated in the response.")
    total_tokens: int       = Field(..., description="The total number of tokens used (input + output).")
    model: str              = Field(..., description="The OpenAI model used for generating the response.")
    execution_time: Optional[float] = Field(0.0, description="Optional execution time for the OpenAI API call in seconds.")

    @field_validator("type")
    def validate_type(cls, v):
        acceptable_values = {"created", "completed", "delta", "error"}
        if v not in acceptable_values:
            raise ValueError(f"type must be one of {acceptable_values}, got '{v}'")
        return v


class KestraOpenAIClient:
    """
    OpenAI client wrapper for Kestra flow generation.
    
    This class provides a simplified interface for interacting with OpenAI's
    responses API to generate Kestra Flow YAML configurations.
    """
    
    def __init__(self, api_key: Optional[str] = None):
        """
        Initialize the Kestra OpenAI client.
        
        Args:
            api_key (Optional[str]): OpenAI API key. If not provided, will
                                   look for OPENAI_API_KEY environment variable.
        
        Raises:
            ValueError: If no API key is provided or found in environment.
        """
        if api_key is None:
            api_key = KESTRABOT_OPENAI_API_KEY            
        if not api_key:
            raise ValueError(
                "OpenAI API key is required. Please provide it as a parameter "
                "or set the OPENAI_API_KEY environment variable."
            )
        self.client = OpenAI(api_key=api_key)
        logger.info("Kestra OpenAI client initialized successfully")
    
    def generate_kestra_flow(self, user_input: str, metadata: Optional[str] = None) -> KestraFlowResponse:
        """
        Generate a Kestra Flow YAML from user input.
        
        This function submits user input to a pre-configured OpenAI prompt
        specifically designed for generating Kestra Flow YAML configurations.
        
        Args:
            user_input (str): The user's prompt describing what they want the
                            Kestra flow to accomplish.
            metadata (Optional[str]): Additional metadata information such as
                                    table schemas, data definitions, credentials, etc.
        
        Returns:
            KestraFlowResponse: A response object containing the generated YAML and metadata.
        
        Raises:
            ValueError: If user_input is empty or None.
            Exception: If OpenAI API call fails.
        
        Example:
            >>> client = KestraOpenAIClient()
            >>> response = client.generate_kestra_flow(
            ...     "Create a flow that extracts data from a CSV file"
            ... )
            >>> print(response.output)
        """
        if not user_input or not user_input.strip():
            raise ValueError("User input cannot be empty")
        
        # Prepare the input string for the OpenAI API
        input_data = user_input
        # Add metadata if provided
        if metadata and metadata.strip():
            input_data += (
                "\n\n"
                "# Metadata\n"
                "This section provides metadata information about sources and targets used in the ETL flow. It contains data schema and source/target connection information.\n\n"
                "<metadata>\n"
                f"{metadata}\n"
                "</metadata>"
            )
        
        try:
            logger.info(f"Generating Kestra flow for user input:\n{user_input[:100]}\n...")
            start_time = time.time()
            
            # Make the API call to OpenAI responses endpoint
            response = self.client.responses.create(
                prompt={
                    "id": KESTRA_PROMPT_ID,
                    "version": KESTRA_PROMPT_VERSION
                },
                input=input_data,
                reasoning={
                    "effort": "medium",
                    "summary": "auto",
                },
                store=False,
            )
            
            # Calculate execution time
            execution_time = time.time() - start_time
            
            # Extract the generated content from the response output field
            if not response.output or len(response.output) == 0:
                raise Exception("No content generated from OpenAI response")
                
            # Get the first output item and extract text content
            output_item = response.output[0]
            
            # Handle different types of output items using getattr for type safety
            generated_content = ""
            content = getattr(output_item, 'content', None)
            if content:
                if isinstance(content, list) and len(content) > 0:
                    first_content = content[0]
                    generated_content = getattr(first_content, 'text', str(first_content))
                else:
                    generated_content = getattr(content, 'text', str(content))
            else:
                # Try to get text directly from the output item
                generated_content = getattr(output_item, 'text', str(output_item))
            
            if not generated_content:
                raise Exception("Could not extract text content from OpenAI response")
            
            # Extract token usage information safely
            input_tokens = 0
            output_tokens = 0
            total_tokens = 0
            if response.usage:
                input_tokens = getattr(response.usage, 'input_tokens', 0)
                output_tokens = getattr(response.usage, 'output_tokens', 0)
                total_tokens = getattr(response.usage, 'total_tokens', 0)
            
            # Extract model information safely
            model = getattr(response, 'model', 'unknown')
            
            logger.info(f"Token usage - Input: {input_tokens}, Output: {output_tokens}, Total: {total_tokens}")
            logger.info(f"Execution time: {execution_time:.2f} seconds")
            logger.info("Kestra flow generated successfully")
            
            # Construct and return KestraFlowResponse object
            return KestraFlowResponse(
                type="completed",
                input=user_input,
                output=generated_content,
                metadata=metadata or "",
                input_tokens=input_tokens,
                output_tokens=output_tokens,
                total_tokens=total_tokens,
                model=model,
                execution_time=execution_time
            )
                
        except Exception as e:
            logger.error(f"Error generating Kestra flow: {str(e)}")
            raise Exception(f"Failed to generate Kestra flow: {str(e)}")
    
    def validate_response(self, response) -> bool:
        """
        Validate the OpenAI response structure.
        
        Args:
            response: The response from OpenAI API.
        
        Returns:
            bool: True if response is valid, False otherwise.
        """
        return (
            response is not None and
            hasattr(response, 'output') and
            response.output is not None and
            len(response.output) > 0
        )


# Convenience function for direct usage
def generate_kestra_flow_from_prompt(user_input: str, metadata: Optional[str] = None) -> KestraFlowResponse:
    """
    Convenience function to generate a Kestra Flow YAML from user input.
    
    This is a simplified wrapper around the KestraOpenAIClient class for
    quick usage without needing to instantiate the client manually.
    
    Args:
        user_input (str): The user's prompt describing what they want the
                        Kestra flow to accomplish.
        metadata (Optional[str]): Additional metadata information.
    
    Returns:
        KestraFlowResponse: A response object containing the generated YAML and metadata.
    
    Raises:
        ValueError: If user_input is empty or None.
        Exception: If OpenAI API call fails.
    
    Example:
        >>> response = generate_kestra_flow_from_prompt(
        ...     "Create a flow that processes customer data"
        ... )
        >>> print(response.output)
    """
    client = KestraOpenAIClient()
    return client.generate_kestra_flow(user_input, metadata)


# Example usage and testing
if __name__ == "__main__":
    # Example usage of the module
    try:
        # Initialize the client
        client = KestraOpenAIClient()
        
        # Test prompt
        test_prompt = (
            "* **Fetch users from API:**\n"
            "  “GET `https://gorest.co.in/public/v2/users`.”\n"
            "\n"
            "* **Convert JSON → Ion:**\n"
            "  “Transform that JSON into Ion format (no new-line splitting).”\n"
            "\n"
            "* **Convert Ion → JSON:**\n"
            "  “Serialize the Ion back into line-delimited JSON.”\n"
            "\n"
            "* **Enrich each record:**\n"
            "  “Run a Jython script on each row to log it and add `inserted_at = current UTC timestamp`.”\n"
            "\n"
            "* **Fan out two branches in parallel:**\n"
            "\n"
            "  **• Postgres branch:**\n"
            "\n"
            "  1. “Convert enriched Ion to CSV with header.”\n"
            "  2. “CREATE TABLE IF NOT EXISTS `public.raw_users` (id, name, email, gender, status, inserted\\_at).”\n"
            "  3. “COPY IN the CSV into Postgres `public.raw_users` via JDBC.”\n"
            "\n"
            "  **• S3 branch:**\n"
            "\n"
            "  1. “Convert enriched Ion to JSON lines.”\n"
            "  2. “Upload `users.json` to S3 bucket `kestraio` using AWS creds from secrets.”\n"
        )   
        # Generate Kestra flow
        response = client.generate_kestra_flow(test_prompt)
        
        print("Generated Kestra Flow YAML:")
        print("-" * 50)
        print(response.output)
        print(f"\nExecution time: {response.execution_time:.2f} seconds")
        print(f"Total tokens used: {response.total_tokens}")
        
    except Exception as e:
        print(f"Error: {e}")
        print("Make sure you have set your OPENAI_API_KEY environment variable")