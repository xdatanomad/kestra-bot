
"""
Kestra Demo OpenAI Integration Module

This module provides integration with OpenAI's API for generating Kestra Flow YAML
configurations from user prompts. It utilizes OpenAI's responses API with a
pre-configured prompt for Kestra flow generation.

Author: Parham (parham.parvizi@gmail.com)
"""

import os
import yaml
import time
import logging
from typing import Optional
from pydantic import BaseModel, Field, field_validator
from openai import OpenAI

from kestrabot.settings import settings


# Load OpenAI API key from environment variable: $KESTRABOT_OPENAI_API_KEY
KESTRABOT_OPENAI_API_KEY = os.getenv("KESTRABOT_OPENAI_API_KEY", None)

# Constants
KESTRA_PROMPT_ID = "pmpt_686e75a5f28c8193b1100b441bcdca320f2c2115eba99734"
KESTRA_PROMPT_VERSION = "1"


class KestraBotFlowResponse(BaseModel):
    """
    KestraFlowResponse represents the response from an OpenAI-powered Kestra flow execution.

    Attributes:
    This class is typically used to encapsulate and validate the response data from an OpenAI API call within a Kestra workflow, providing metadata about token usage and the model employed.
    """
    id: Optional[str]       = Field(None, description="The unique OpenAI response ID, if available.")
    type: str               = Field("completed", description="The type of response, indicating it is a Kestra flow response used with OpenAI Streaming Responses. Valid values: 'created', 'completed', 'delta', 'error'.")
    input: str              = Field(..., description="The user input prompt sent to OpenAI for generating the Kestra flow.")
    output: str             = Field(..., description="The YAML response content generated by OpenAI.")
    metadata: Optional[str] = Field("", description="Optional metadata context provided to OpenAI, such as table schemas or data definitions.")
    input_tokens: int       = Field(..., description="The number of input tokens used in the request.")
    output_tokens: int      = Field(..., description="The number of output tokens generated in the response.")
    total_tokens: int       = Field(..., description="The total number of tokens used (input + output).")
    model: str              = Field(..., description="The OpenAI model used for generating the response.")
    execution_time: Optional[float] = Field(0.0, description="Optional execution time for the OpenAI API call in seconds.")

    @field_validator("type")
    def validate_type(cls, v):
        acceptable_values = {"created", "completed", "delta", "error"}
        if v not in acceptable_values:
            raise ValueError(f"type must be one of {acceptable_values}, got '{v}'")
        return v


class KestraBotOpenAIClient:
    """
    OpenAI client wrapper for Kestra flow generation.
    
    This class provides a simplified interface for interacting with OpenAI's
    responses API to generate Kestra Flow YAML configurations.
    """
    
    def __init__(self, api_key: Optional[str] = None):
        """
        Initialize the Kestra OpenAI client.
        
        Args:
            api_key (Optional[str]): OpenAI API key. If not provided, will
                                   look for OPENAI_API_KEY environment variable.
        
        Raises:
            ValueError: If no API key is provided or found in environment.
        """
        if api_key is None:
            api_key = settings.openai_api_key or KESTRABOT_OPENAI_API_KEY            
        if not api_key:
            raise ValueError(
                "OpenAI API key is required. Please provide it as a parameter "
                "or set the OPENAI_API_KEY environment variable."
            )
        logging.info(f"Found OpenAI API key: '{'*' * 4}{api_key[-6:]}'")
        self.client = OpenAI(api_key=api_key)
        logging.info("Kestra OpenAI client initialized successfully")
    
    def generate_kestra_flow(self, user_input: str, metadata: Optional[str] = None) -> KestraBotFlowResponse:
        """
        Generate a Kestra Flow YAML from user input.
        
        This function submits user input to a pre-configured OpenAI prompt
        specifically designed for generating Kestra Flow YAML configurations.
        
        Args:
            user_input (str): The user's prompt describing what they want the
                            Kestra flow to accomplish.
            metadata (Optional[str]): Additional metadata information such as
                                    table schemas, data definitions, credentials, etc.
        
        Returns:
            KestraFlowResponse: A response object containing the generated YAML and metadata.
        
        Raises:
            ValueError: If user_input is empty or None.
            Exception: If OpenAI API call fails.
        
        Example:
            >>> client = KestraOpenAIClient()
            >>> response = client.generate_kestra_flow(
            ...     "Create a flow that extracts data from a CSV file"
            ... )
            >>> print(response.output)
        """
        if not user_input or not user_input.strip():
            raise ValueError("User input cannot be empty")
        
        # Prepare the input string for the OpenAI API
        input_data = user_input
        # Add metadata if provided
        if metadata and metadata.strip():
            input_data += (
                "\n\n"
                "# Metadata\n"
                "This section provides metadata information about sources and targets used in the ETL flow. It contains data schema and source/target connection information.\n\n"
                "<metadata>\n"
                f"{metadata}\n"
                "</metadata>"
            )
        
        try:
            logging.info(f"Generating Kestra flow for user input:\n{user_input[:100]}\n...")
            start_time = time.time()
            
            # Make the API call to OpenAI responses endpoint
            response = self.client.responses.create(
                prompt={
                    "id": KESTRA_PROMPT_ID,
                    "version": KESTRA_PROMPT_VERSION
                },
                input=input_data,
                reasoning={
                    "effort": "medium",
                    "summary": "auto",
                },
                store=False,
            )
            
            # Calculate execution time
            execution_time = time.time() - start_time
                
            # Get the generated content from the first output item
            generated_content = response.output_text
            if not generated_content:
                raise Exception("Could not extract output text content from OpenAI response")
            # Validate and cleanup response into valid Kestra YAML
            generated_content = self.validate_response_yaml(generated_content)

            # Extract token usage information safely
            input_tokens = 0
            output_tokens = 0
            total_tokens = 0
            if response.usage:
                input_tokens = getattr(response.usage, 'input_tokens', 0)
                output_tokens = getattr(response.usage, 'output_tokens', 0)
                total_tokens = getattr(response.usage, 'total_tokens', 0)
            
            # Extract model information safely
            model = getattr(response, 'model', 'unknown')
            
            logging.info(f"Token usage - Input: {input_tokens}, Output: {output_tokens}, Total: {total_tokens}")
            logging.info(f"Execution time: {execution_time:.2f} seconds")
            logging.info("Kestra flow generated successfully")
            
            # Construct and return KestraFlowResponse object
            return KestraBotFlowResponse(
                id=(response.id or None),
                type="completed",
                input=user_input,
                output=generated_content,
                metadata=(metadata or ""),
                input_tokens=input_tokens,
                output_tokens=output_tokens,
                total_tokens=total_tokens,
                model=model,
                execution_time=execution_time
            )
                
        except Exception as e:
            logging.error(f"Error generating Kestra flow: {str(e)}")
            raise Exception(f"Failed to generate Kestra flow: {str(e)}")
    
    def validate_response_yaml(self, content: str) -> str:
        """
        Validate the generated Kestra flow YAML content. Clean up the YAML content to remove any markdown formatting
        and ensure it's a valid YAML string.

        Args:
            content (str): The generated Kestra flow YAML content.
        Returns:
            str: Cleaned and validated YAML content.
        """
        if not content:
            raise ValueError("Kestra YAML Content cannot be empty")
        
        # Remove any markdown formatting
        cleaned_content = content.strip().replace("```yaml", "").replace("```", "")
        cleaned_content = cleaned_content.strip()

        # Parse the cleaned content to ensure it's valid YAML
        try:
            tmp = yaml.safe_load(cleaned_content)
            # make sure the content is valid Kestra YAML
            required_keys = ["id", "namespace", "tasks"]
            if any(key not in tmp for key in required_keys):
                raise ValueError(f"Invalid Kestra YAML structure. Missing one of the required keys: {required_keys}")
        except yaml.YAMLError as e:
            raise ValueError(f"Invalid Kestra YAML content: {str(e)}")
        
        return cleaned_content



client: Optional[KestraBotOpenAIClient] = None


def get_kestrabot_client() -> KestraBotOpenAIClient:
    """
    Get the global Kestra OpenAI client instance.
    
    This function initializes the KestraOpenAIClient if it has not been created yet,
    ensuring that the client is ready for use throughout the application.
    
    Returns:
        KestraOpenAIClient: The initialized Kestra OpenAI client instance.
    """
    global client
    if client is None:
        client = KestraBotOpenAIClient()
        logging.info("Kestra OpenAI client instance created")
    return client


def test():
    """
    Test function to verify the Kestra OpenAI client functionality.
    
    This function is intended for internal testing purposes to ensure that the
    Kestra OpenAI client can successfully generate a Kestra flow from a sample prompt.
    
    Raises:
        Exception: If the test fails or if the API key is not set.
    """
    # Example usage of the module
    try:
        # Initialize the client
        client = KestraBotOpenAIClient()
        
        # Test prompt
        test_prompt = (
            "* **Fetch users from API:**\n"
            "  “GET `https://gorest.co.in/public/v2/users`.”\n"
            "\n"
            "* **Convert JSON → Ion:**\n"
            "  “Transform that JSON into Ion format (no new-line splitting).”\n"
            "\n"
            "* **Convert Ion → JSON:**\n"
            "  “Serialize the Ion back into line-delimited JSON.”\n"
            "\n"
            "* **Enrich each record:**\n"
            "  “Run a Jython script on each row to log it and add `inserted_at = current UTC timestamp`.”\n"
            "\n"
            "* **Fan out two branches in parallel:**\n"
            "\n"
            "  **• Postgres branch:**\n"
            "\n"
            "  1. “Convert enriched Ion to CSV with header.”\n"
            "  2. “CREATE TABLE IF NOT EXISTS `public.raw_users` (id, name, email, gender, status, inserted\\_at).”\n"
            "  3. “COPY IN the CSV into Postgres `public.raw_users` via JDBC.”\n"
            "\n"
            "  **• S3 branch:**\n"
            "\n"
            "  1. “Convert enriched Ion to JSON lines.”\n"
            "  2. “Upload `users.json` to S3 bucket `kestraio` using AWS creds from secrets.”\n"
        )   
        # Generate Kestra flow
        response = client.generate_kestra_flow(test_prompt)
        
        print("Generated Kestra Flow YAML:")
        print("-" * 50)
        print(response.output)
        print(f"\nExecution time: {response.execution_time:.2f} seconds")
        print(f"Total tokens used: {response.total_tokens}")
        
    except Exception as e:
        print(f"Error: {e}")
        print("Make sure you have set your OPENAI_API_KEY environment variable")


# Example usage and testing
if __name__ == "__main__":
    test()